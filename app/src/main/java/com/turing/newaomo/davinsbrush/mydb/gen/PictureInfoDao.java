package com.turing.newaomo.davinsbrush.mydb.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.turing.newaomo.davinsbrush.mydb.StringConverter;
import java.util.List;

import com.turing.newaomo.davinsbrush.mydb.bean.PictureInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PICTURE_INFO".
*/
public class PictureInfoDao extends AbstractDao<PictureInfo, Void> {

    public static final String TABLENAME = "PICTURE_INFO";

    /**
     * Properties of entity PictureInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", false, "ID");
        public final static Property Style = new Property(1, String.class, "style", false, "STYLE");
        public final static Property Colors = new Property(2, String.class, "colors", false, "COLORS");
        public final static Property Color1 = new Property(3, String.class, "color1", false, "COLOR1");
        public final static Property Color2 = new Property(4, String.class, "color2", false, "COLOR2");
        public final static Property Color3 = new Property(5, String.class, "color3", false, "COLOR3");
        public final static Property Info = new Property(6, String.class, "info", false, "INFO");
        public final static Property Path = new Property(7, String.class, "path", false, "PATH");
    }

    private final StringConverter colorsConverter = new StringConverter();

    public PictureInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PictureInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PICTURE_INFO\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"STYLE\" TEXT," + // 1: style
                "\"COLORS\" TEXT," + // 2: colors
                "\"COLOR1\" TEXT," + // 3: color1
                "\"COLOR2\" TEXT," + // 4: color2
                "\"COLOR3\" TEXT," + // 5: color3
                "\"INFO\" TEXT," + // 6: info
                "\"PATH\" TEXT);"); // 7: path
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PICTURE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PictureInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String style = entity.getStyle();
        if (style != null) {
            stmt.bindString(2, style);
        }
 
        List colors = entity.getColors();
        if (colors != null) {
            stmt.bindString(3, colorsConverter.convertToDatabaseValue(colors));
        }
 
        String color1 = entity.getColor1();
        if (color1 != null) {
            stmt.bindString(4, color1);
        }
 
        String color2 = entity.getColor2();
        if (color2 != null) {
            stmt.bindString(5, color2);
        }
 
        String color3 = entity.getColor3();
        if (color3 != null) {
            stmt.bindString(6, color3);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(7, info);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(8, path);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PictureInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String style = entity.getStyle();
        if (style != null) {
            stmt.bindString(2, style);
        }
 
        List colors = entity.getColors();
        if (colors != null) {
            stmt.bindString(3, colorsConverter.convertToDatabaseValue(colors));
        }
 
        String color1 = entity.getColor1();
        if (color1 != null) {
            stmt.bindString(4, color1);
        }
 
        String color2 = entity.getColor2();
        if (color2 != null) {
            stmt.bindString(5, color2);
        }
 
        String color3 = entity.getColor3();
        if (color3 != null) {
            stmt.bindString(6, color3);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(7, info);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(8, path);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public PictureInfo readEntity(Cursor cursor, int offset) {
        PictureInfo entity = new PictureInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // style
            cursor.isNull(offset + 2) ? null : colorsConverter.convertToEntityProperty(cursor.getString(offset + 2)), // colors
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // color1
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // color2
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // color3
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // info
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // path
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PictureInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStyle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setColors(cursor.isNull(offset + 2) ? null : colorsConverter.convertToEntityProperty(cursor.getString(offset + 2)));
        entity.setColor1(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setColor2(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setColor3(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setInfo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(PictureInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(PictureInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(PictureInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
